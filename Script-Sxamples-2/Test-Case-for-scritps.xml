<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="34af61a7-03a8-477b-a828-e54acc30dccd" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Test Case for scritps" searchProperties="true" timeout="0">
  <con:settings id="110218fd-5a5e-451a-99d3-a36d601c52de">
    <con:setting id="IncludeOverview">true</con:setting>
    <con:setting id="IncludeResults">true</con:setting>
    <con:setting id="FlowLayout">false</con:setting>
    <con:setting id="ErrorDetails">true</con:setting>
    <con:setting id="IncludeCoverage">true</con:setting>
    <con:setting id="6412b7ba-b9a3-4f85-a637-a43cfb8edf97fileName">Test-Case-for-scritps</con:setting>
    <con:setting id="34af61a7-03a8-477b-a828-e54acc30dccdfileName">Test-Case-for-scritps</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="Update test case prop" id="fee3b80d-530f-42eb-ad90-f817c0e729ca">
    <con:settings/>
    <con:config>
      <script>log.info("============= SCRIPT UDPATE PROP =================I")

def propToUpdatte = 'MyProp'
def newValue = 'new Value'

// --- Con context
def currTescCase = context.getTestCase()
log.info("Test case:: ${ currTescCase.name}")

def tcProps =  currTescCase.properties

for (var aProp  in tcProps){
	log.info("Prop: ${aProp.key}")
	if(aProp.key == propToUpdatte){
		aProp.setValue(newValue);
		break
	}
}

def aProp = currTescCase.getProperty(propToUpdatte)
aProp.setValue(newValue);

// con testrunner
def prop2ToUpdate = 'SecProp'
def newValue2 = 'new Value 2'
testRunner.getTestCase().getProperty(prop2ToUpdate).setValue(newValue2)

// update with previous result
def testResults = testRunner.results
def result = ''
def  stepName = "getOne"

for( aResp in testResults ){
	log.info ">  TestStep [" + aResp.testStep.name + "] finished with status " + aResp.status
	if( aResp.testStep.name == stepName){		
		result = aResp.responseContent
		//break;
	}
}

testRunner.getTestCase().getProperty(prop2ToUpdate).setValue(result)
log.info("Test case prop 2: ${testRunner.getTestCase().getProperty(prop2ToUpdate).getValue()} ")</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Lib use" id="6cadb810-2f5d-47f1-8791-1279411256be">
    <con:settings/>
    <con:config>
      <script>import Callee

c = new Callee()
log.info(c.hello())

Callee.salute("Ricardo",log)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Access assertions" id="17e524fc-0c33-4f4a-8f10-924b4e8a769c">
    <con:settings/>
    <con:config>
      <script>log.info("============= SCRIPT ACCESS ASSERTIONS  =================I")

testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions     
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "-Assertion:  $it.label - $it.status"
        }
    }
}

log.info("END....")</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="Save results" id="545e24b2-3b36-436f-9f96-996cc611a75c">
    <con:settings/>
    <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:DataSinkStep">
      <con:dataSink type="Groovy">
        <con:configuration>
          <script>import groovy.sql.Sql
import java.util.Date   

log.info("Storing results scrpit...")


def stepName = "getOne"

// DB params
try{
	def sql = Sql.newInstance('jdbc:mysql://localhost:3306/productsdb', 'products_user', 'rapi123', 'com.mysql.jdbc.Driver')
	sql.connection.autoCommit = false
}catch(Exception ex){
	log.error("Error conectándose: ${ex}")
	//testRunner.fail("Error de conexión")
}

Date date = new Date()
def fecha = date.format( 'yyyy-MM-dd' )
def testStepName = 'login user'

String status = '';
def passed

/* Using a property */
/*
def testStep =  context.testCase.getTestStepByName("Guardar token")
def stepProperty = testStep.getProperty("token")
def passed = stepProperty.getValue()!=null
*/

/* Rerunning a step */

/*
def rtestStep =  context.testCase.getTestStepByName(stepName)
String status = testRunner.runTestStep(rtestStep).status
passed = status.equals("PASS")
log.info("status: ${status}")*/

/* Searching for results */
log.info("results: ${testRunner.results}")
for( r in testRunner.results ){
	log.info "*** TestStep [" + r.testStep.name + "] finished with status " + r.status
	if(stepName == r.testStep.name){		
		status = r.status
		break;
	}
}

if(status != ''){
	passed = status.equals("PASS")
	// Geneate query
	def sqlstr = "INSERT INTO results (fecha,teststepname,resultado) VALUES (${fecha},${stepName}, ${passed})" 
	log.info("sqlstr: ${sqlstr}")	
	
	// Insert
	try {
		sql.execute(sqlstr);
		sql.commit()
		log.info("Successfully committed")
	}catch(Exception ex) {
		sql.rollback()
		log.error("Transaction rollback: ${ex}")		
	}
	
	sql.close()
}</script>
        </con:configuration>
      </con:dataSink>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>MyProp</con:name>
      <con:value>new Value</con:value>
    </con:property>
    <con:property>
      <con:name>SecProp</con:name>
      <con:value/>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
